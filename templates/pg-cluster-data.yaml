{{- if and $.Values.isCommunity $.Values.image.private_repository -}}
{{- $preparedDatabasesList := splitList "," $.Values.preparedDatabases }}
{{- $preparedExtensionsList := splitList "," $.Values.preparedExtensions }}
{{- range $pod := until ( .Values.numDataNodes | int) }}
---
kind: "postgresql"
apiVersion: "acid.zalan.do/v1"
metadata:
  name: {{ $.Values.pgClusterName }}-data-{{ ($pod | toString) }}
  annotations:
    acid.zalan.do/controller: {{ $.Values.pgClusterName }}
  labels:
    team: {{ (split "-" $.Values.pgClusterName)._0 }} # if the teams API https://postgres-operator.readthedocs.io/en/latest/user/#teams-api-roles is required to generate users
                                                    #  -> this line must be changed and a new value called team-name should be added to the config.json in the postgresql-tas repository
                                                    #  -> which should be used as a prefix instead of the data-service name (i.e., postgresql) -> https://postgres-operator.readthedocs.io/en/latest/user/
spec:
  {{- if $.Values.image.private_repository }}
  {{- if $.Values.isCommunity }}
  dockerImage: {{ $.Values.image.repository_community }}:{{ $.Values.image.tag }}
  {{ else }}
  dockerImage: {{ $.Values.image.repository_apache }}:{{ $.Values.image.tag }}
  {{- end }}
  {{- end }}

  teamId: "{{ (split "-" $.Values.pgClusterName)._0 }}"
  postgresql:
    version: "14"
    parameters:
      max_prepared_transactions: "5"
      shared_buffers: "32MB"
      max_connections: "100"
      log_statement: "all"
  # patroni: #TODO: left this section here in case we want to change some patroni settings
  #  pg_hba:
  #    - local   all             all                                   trust
  #    - hostssl all             +zalandos    127.0.0.1/32       pam
  #    - host    all             all                127.0.0.1/32       md5
  #    - hostssl all             +zalandos    ::1/128            pam
  #    - host    all             all                ::1/128            md5
  #    - local   replication     standby                    trust
  #    - hostssl replication     standby all                md5
  #    - hostnossl all           all                all                reject
  #    - hostssl all             +zalandos    all                pam
  #    - hostssl all             all                all                md5
  #    - host    all       all   all   trust
  numberOfInstances: {{ $.Values.dataNodesNumberOfreplicas }}
  enableConnectionPooler: false
  volume:
    size: {{ $.Values.DN.volume.size }}
  allowedSourceRanges:
    # IP ranges to access your cluster go here

  preparedDatabases: # prepares a database at startup and gives it the necessary extensions
    {{- range $index, $dbname := $preparedDatabasesList }}
    {{ $dbname }}:
      extensions:
    {{- range $index, $extname := $preparedExtensionsList }}
        {{ $extname }}: public
    {{- end }}
      schemas:
        public:
          defaultRoles: false
    {{- end }}


  tls:
    secretName: "{{ $.Values.pgClusterName }}-cert"
    certificateFile: "tls.crt"
    privateKeyFile: "tls.key"
    caFile: "ca.crt"
  resources:
    requests:
      cpu: {{ $.Values.DN.resources.requests.cpu }}
      memory: {{ $.Values.DN.resources.requests.memory }}
    limits:
      cpu: {{ $.Values.DN.resources.limits.cpu }}
      memory: {{ $.Values.DN.resources.limits.memory }}
  spiloFSGroup: 103


{{- if $.Values.Clone.isClone }}
{{- $UIDs := splitList "," $.Values.Clone.cloneofUid_data }}
{{- with (index $UIDs $pod) }}
  env:
    # the location in ADLS to clone from has to be dynamically changed for each data node
    - name: CLONE_WALG_AZ_PREFIX
      value: "azure://{{ $.Values.Backup.AzureContainerName }}/{{ $.Values.Clone.cloneOfName }}-data-{{ ($pod | toString) }}/$(PGVERSION)"
  clone:
    cluster: {{ $.Values.Clone.cloneOfName }}-data-{{ ($pod | toString) }}
    uid: {{ . }}
    timestamp: {{ $.Values.Clone.cloneTimestamp }}

{{- end }}
{{- end }}
{{- if $.Values.Monitor.enabled }}
  sidecars:
    - name: "exporter"
      image: "wrouesnel/postgres_exporter"
      ports:
        - name: exporter
          containerPort: 9187
          protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 256M
        requests:
          cpu: 100m
          memory: 200M
      env:
        - name: "DATA_SOURCE_URI"
          value: "localhost/?sslmode=require"
        - name: "PG_EXPORTER_AUTO_DISCOVER_DATABASES"
          value: "true"
        - name: "DATA_SOURCE_USER"
          valueFrom:
            secretKeyRef:
              name: postgres.{{ $.Values.pgClusterName }}-data-{{ ($pod | toString) }}.credentials.postgresql.acid.zalan.do
              key: username
        - name: "DATA_SOURCE_PASS"
          valueFrom:
            secretKeyRef:
              name: postgres.{{ $.Values.pgClusterName }}-data-{{ ($pod | toString) }}.credentials.postgresql.acid.zalan.do
              key: password

{{- end }}
...
{{ end }}
{{ end }}
